1) Simple.cu uses 16 threads on 1 core on 1 SM

2) Here the results are the same but maybe not always : with double precision

3) index for 2D blocks	:
	int X = blockIdx.x * blockDim.x + threadIdx.x;
	int Y = blockIdx.y * blockDim.y + threadIdx.y;


	int idx = N * Y + X;
	cc[idx] = ca[idx] + cb[idx];


4)
We mesaured only the time of computation (not data transfer)
Block size 32 x 32 :
GPU : 0.000231
CPU : 0.027455 




If we use too many threads per blocks (more than 1024) the results is incorrect


5) After 2500 values the GPU computation is faster than on the CPU .
GPU : 0.000021
CPU : 0.000019
N = 50
DIV = 10 



6) A good choice for the size of a block is a multiple of 32 because 32 threads can run in parallel on one core.

7) 
N = 1024 / DIV = 32	=> blocks of 32x32 = 1024 threads
0.000234

N = 1024 / DIV = 64	=> blocks of 16x16 = 256 threads
0.000176

N = 1024 / DIV = 128	=> blocks of 8x8 = 64 threads
0.000335

N = 1024 / DIV = 256	=> blocks of 4x4 = 16 threads less than a warp 
0.000995




8)

good coalescing : 
0.000175


bad coalescing :
0.000423

We can see that coalescing is very important for performance.


Mandelbrot
-----------

1) Instead of a double loop to calculate the pixels values we need to start a kernel which does the computation for one pixel.
2) We will use 512 blocks of 512 threads
3) To be able to use the Complex class in the kernel we have to use declare its methods with the modifier __device__

4) 

GPU time to compute Mandelbrot : 0.000105 s
CPU time to compute Mandelbrot : 0.094466 s

5) Double precision : 

CPU : 0.098465 s
GPU : 0.000603 s

6) Here load balancing is not a problem since a thread compute only one pixel
